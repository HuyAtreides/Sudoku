{"version":3,"sources":["Components/Header/Header.jsx","Components/SudokuWraper/GameInfo/Timer.jsx","Components/SudokuWraper/GameInfo/GameInfo.jsx","Components/SudokuWraper/GameWraper/Board/Board.jsx","Components/SudokuWraper/GameWraper/GameControls/GameControls.jsx","Components/SudokuWraper/GameWraper/GameWraper.jsx","CloneBoard/clone.js","Components/SudokuWraper/SudokuWraper.jsx","Components/Sudoku.jsx","Components/About.jsx","Components/HowToPlay.jsx","Components/Tips.jsx","SudokuApp.jsx","index.jsx"],"names":["openNav","event","aboutSudoku","document","querySelector","currentTarget","className","style","display","Header","id","onClick","to","Timer","props","minute","Math","floor","time","toString","clocklifyMinute","length","second","clocklifySecond","start","generating","color","startTimer","GameInfo","showSelector","difficultySelector","animationName","animationFillMode","animationDuration","value","setDifficulty","createDifficultySelector","chooseDifficulty","difficulty","mistakes","createBoardState","blankCells","cursor","generateNewPuzzle","createGameoverState","createSolvedState","createPauseState","getColor","cell","type","hint","wrong","sameValue","focus","Board","sudokuBoard","board","map","row","rowIndex","cells","colIndex","backgroundColor","key","col","createSudokuBoard","boardState","GameControls","numpads","number","setValue","tooltip","showTooltip","createTooltip","showHint","removeValue","isVisualizing","visualize","GameWraper","clone","reduce","accumulator","cloneRow","attr","Object","assign","push","Easy","Medium","Hard","SudokuWraper","state","target","genrating","bind","sovle","this","setState","prevState","correctValue","solution","isFilled","index","blankCellsPostions","Promise","resolve","num","reject","setTimeout","checkRow","checkCol","checkBox","complete","prevRow","prevCol","newRow","newCol","parseInt","getAttribute","parentNode","cellVal","boxRow","boxCol","forEach","boardRow","isInBox","getCellBoxPosition","highlight","choosenDifficulty","reset","backupBoard","fetch","then","res","json","newBoard","Array","fill","clearInterval","intervalID","undefined","handleSetValueLogic","setInterval","keyMove","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","addEventListener","test","React","Component","animateFilled","delay","name","filledCol","animation","onanimationend","i","j","animateBoard","Sudoku","About","src","alt","class","marginTop","HowToPlay","Tips","href","rel","SudokuApp","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f25ba3a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.scss\";\r\nimport { Link } from \"react-router-dom\";\r\nconst openNav = (event) => {\r\n  const aboutSudoku = document.querySelector(\".about-sudoku\");\r\n  if (event.currentTarget.className === \"fas fa-times\") {\r\n    aboutSudoku.style.display = \"none\";\r\n    event.currentTarget.className = \"fa fa-bars\";\r\n  } else {\r\n    event.currentTarget.className = \"fas fa-times\";\r\n    aboutSudoku.style.display = \"flex\";\r\n  }\r\n};\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div id=\"header-wraper\">\r\n        <div className=\"title-and-bars\">\r\n          <i className=\"fa fa-bars\" onClick={openNav}></i>\r\n          <h2>Sudoku</h2>\r\n        </div>\r\n        <h1>Sudoku</h1>\r\n        <nav className=\"about-sudoku\">\r\n          <ul>\r\n            <Link to=\"/about\">\r\n              <li>\r\n                About<div id=\"underline\"></div>\r\n              </li>\r\n            </Link>\r\n\r\n            <Link to=\"/how-to-play\">\r\n              <li>\r\n                How To Play<div id=\"underline\"></div>\r\n              </li>\r\n            </Link>\r\n\r\n            <Link to=\"/tips\">\r\n              <li>\r\n                Tips<div id=\"underline\"></div>\r\n              </li>\r\n            </Link>\r\n          </ul>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Timer.scss\";\r\n\r\nconst Timer = (props) => {\r\n  const minute = Math.floor(props.time / 60).toString();\r\n  const clocklifyMinute = minute.length < 2 ? \"0\" + minute : minute;\r\n  const second = (props.time % 60).toString();\r\n  const clocklifySecond = second.length < 2 ? \"0\" + second : second;\r\n  const className = props.start && !props.generating ? \"fa-pause\" : \"fa-play\";\r\n  return (\r\n    <div id=\"timer\">\r\n      <span>{clocklifyMinute + \":\" + clocklifySecond} &nbsp;</span>\r\n      <div id=\"circle\" style={{ color: \"#a4a3a8\" }} onClick={props.startTimer}>\r\n        <i className={`fa ${className}`}></i>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport \"./GameInfo.scss\";\r\nimport Timer from \"./Timer.jsx\";\r\n\r\nconst createDifficultySelector = (props) => {\r\n  const style = {\r\n    animationName: props.showSelector ? \"appear\" : \"disappear\",\r\n    animationFillMode: \"forwards\",\r\n    animationDuration: \"0.5s\",\r\n  };\r\n  const difficultySelector = (\r\n    <div className=\"difficulty-selector\" style={style}>\r\n      <p value=\"Easy\" onClick={props.setDifficulty}>\r\n        Easy\r\n      </p>\r\n      <p value=\"Medium\" onClick={props.setDifficulty}>\r\n        Medium\r\n      </p>\r\n      <p value=\"Hard\" onClick={props.setDifficulty}>\r\n        Hard\r\n      </p>\r\n    </div>\r\n  );\r\n  return difficultySelector;\r\n};\r\n\r\nconst GameInfo = (props) => {\r\n  const className = props.showSelector ? \"fa-angle-up\" : \"fa-angle-down\";\r\n  const difficultySelector = createDifficultySelector(props);\r\n  return (\r\n    <div className=\"game-info\">\r\n      <div id=\"difficulty\">\r\n        <strong>Difficulty: </strong>&nbsp;\r\n        <span onClick={props.chooseDifficulty} id=\"chooseDifficulty\">\r\n          {props.difficulty} &nbsp;\r\n          <i className={`fa ${className}`}></i>\r\n        </span>\r\n        {difficultySelector}\r\n      </div>\r\n      <div id=\"mistakes\">\r\n        <strong> Mistakes: </strong>&nbsp;\r\n        <span>{`${props.mistakes}/3`}</span>\r\n      </div>\r\n      <Timer\r\n        generating={props.generating}\r\n        time={props.time}\r\n        startTimer={props.startTimer}\r\n        start={props.start}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameInfo;\r\n","import React from \"react\";\r\nimport \"./Board.scss\";\r\n\r\nconst createPauseState = (props) => {\r\n  const boardState = (\r\n    <div className=\"pause\">\r\n      <i className=\"fa fa-play fa-2x\" onClick={props.startTimer}></i>\r\n    </div>\r\n  );\r\n  return boardState;\r\n};\r\n\r\nconst createGameoverState = (props) => {\r\n  const boardState = (\r\n    <div className=\"gameover\">\r\n      <p style={{ color: \"#344861\" }}>\r\n        <strong>Game Over</strong>\r\n      </p>\r\n      <p style={{ color: \"#7c7d7a\" }}>\r\n        You have made 3 mistakes <br></br> and lost this game\r\n      </p>\r\n      <p\r\n        style={{ color: \"rgb(74, 144, 226)\", cursor: \"pointer\" }}\r\n        onClick={() => props.generateNewPuzzle(null, true)}\r\n      >\r\n        <strong>try again</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n  return boardState;\r\n};\r\n\r\nconst createSolvedState = (props) => {\r\n  const minute = Math.floor(props.time / 60).toString();\r\n  const clocklifyMinute = minute.length < 2 ? \"0\" + minute : minute;\r\n  const second = (props.time % 60).toString();\r\n  const clocklifySecond = second.length < 2 ? \"0\" + second : second;\r\n  const boardState = (\r\n    <div className=\"solved\">\r\n      <p style={{ color: \"#344861\" }}>\r\n        <strong>You Have Solved The Puzzle!</strong>\r\n      </p>\r\n      <p style={{ color: \"#7c7d7a\" }}>\r\n        <strong>Time: </strong>\r\n        {clocklifyMinute + \":\" + clocklifySecond} <br></br>\r\n        <strong>Difficulty: </strong>\r\n        {props.difficulty} <br></br>\r\n        <strong>Mistakes: </strong>\r\n        {props.mistakes}\r\n      </p>\r\n      <p\r\n        style={{ color: \"rgb(74, 144, 226)\", cursor: \"pointer\" }}\r\n        onClick={() => props.generateNewPuzzle(null, false)}\r\n      >\r\n        <strong>New Puzzle</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n  return boardState;\r\n};\r\n\r\nconst createBoardState = (props) => {\r\n  if (props.generating) return <div className=\"spinner\"></div>;\r\n  if (!props.start && props.mistakes !== 3 && props.blankCells !== 0)\r\n    return createPauseState(props);\r\n  else if (props.mistakes === 3) return createGameoverState(props);\r\n  else if (props.blankCells === 0) return createSolvedState(props);\r\n  return null;\r\n};\r\n\r\nconst getColor = (cell, type, props) => {\r\n  switch (type) {\r\n    case \"color\":\r\n      if (\r\n        (!props.start || !cell.value || props.mistakes === 3) &&\r\n        props.blankCells !== 0\r\n      )\r\n        return \"transparent\";\r\n      if (!cell.hint) return \"#5996f7\";\r\n      if (cell.wrong) return \"rgb(220, 53, 69)\";\r\n      return \"\";\r\n    case \"background\":\r\n      if (!props.start || props.mistakes === 3 || props.blankCells === 0)\r\n        return \"\";\r\n      if (cell.sameValue) return \"#cbdbed\";\r\n      if (cell.focus === \"inDomain\") return \"#e2e7ed\";\r\n      if (cell.focus === \"target\") return \"#bbdefb\";\r\n      break;\r\n    default:\r\n      return null;\r\n  }\r\n};\r\n\r\nconst createSudokuBoard = (props) => {\r\n  const sudokuBoard = props.board.map((row, rowIndex) => {\r\n    const cells = row.map((cell, colIndex) => {\r\n      const style = {\r\n        color: getColor(cell, \"color\", props),\r\n        backgroundColor: getColor(cell, \"background\", props),\r\n      };\r\n      return (\r\n        <div\r\n          className={`col${colIndex}`}\r\n          key={`col${colIndex}`}\r\n          style={style}\r\n          col={colIndex}\r\n          onClick={props.focus}\r\n          value={cell.value}\r\n        >\r\n          {cell.value ? cell.value : 0}\r\n        </div>\r\n      );\r\n    });\r\n    return (\r\n      <div className={`row${rowIndex}`} key={`row${rowIndex}`} row={rowIndex}>\r\n        {cells}\r\n      </div>\r\n    );\r\n  });\r\n  return sudokuBoard;\r\n};\r\n\r\nconst Board = (props) => {\r\n  const sudokuBoard = createSudokuBoard(props);\r\n  const boardState = createBoardState(props);\r\n  return (\r\n    <div className=\"board\">\r\n      {sudokuBoard}\r\n      {boardState}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./GameControls.scss\";\r\nconst createTooltip = (props) => {\r\n  const style = {\r\n    animationName: props.tooltip ? \"appear\" : \"disappear\",\r\n    animationFillMode: \"forwards\",\r\n    animationDuration: \"0.5s\",\r\n  };\r\n  const tooltip = (\r\n    <div className=\"tooltip\" style={style}>\r\n      <p style={{ color: \"#a4a3a8\" }} id=\"announce\">\r\n        Current Game Progess <br></br>\r\n        Will Be Lost\r\n      </p>\r\n      <p\r\n        style={{ color: \"#4a90e2\" }}\r\n        id=\"p\"\r\n        onClick={() => props.generateNewPuzzle(null, false)}\r\n      >\r\n        <strong>New Puzzle</strong>\r\n      </p>\r\n      <p\r\n        style={{ color: \"#4a90e2\" }}\r\n        id=\"p\"\r\n        onClick={() => props.generateNewPuzzle(null, true)}\r\n      >\r\n        <strong>Restart</strong>\r\n      </p>\r\n      <p style={{ color: \"#dc3545\" }} id=\"p\" onClick={props.showTooltip}>\r\n        <strong>Cancel</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n  return tooltip;\r\n};\r\nconst GameControls = (props) => {\r\n  const numpads = [1, 2, 3, 4, 5, 6, 7, 8, 9].map((number) => {\r\n    return (\r\n      <div\r\n        className={\"numpad\" + number}\r\n        key={\"numpad\" + number}\r\n        onClick={props.setValue}\r\n        value={number}\r\n      >\r\n        {number}\r\n      </div>\r\n    );\r\n  });\r\n  const tooltip = createTooltip(props);\r\n  return (\r\n    <div className=\"game-controls\">\r\n      <div className=\"game-button\" onClick={props.showTooltip}>\r\n        New Game\r\n      </div>\r\n      <div className=\"number-pad\">{numpads}</div>\r\n      <div className=\"controls-pad\">\r\n        <div className=\"hint\" onClick={props.showHint}>\r\n          <i className=\"far fa-lightbulb \"></i>\r\n          Hint\r\n        </div>\r\n        <div className=\"erase\" onClick={props.removeValue}>\r\n          <i className=\"fas fa-eraser \"></i>\r\n          Erase\r\n        </div>\r\n        <div\r\n          className=\"visualize\"\r\n          style={{\r\n            backgroundColor: props.isVisualizing ? \"rgb(187, 222, 251)\" : \"\",\r\n          }}\r\n          onClick={props.visualize}\r\n        >\r\n          <i className=\"fas fa-chess-board\"></i>\r\n          Visualize\r\n        </div>\r\n      </div>\r\n      {tooltip}\r\n    </div>\r\n  );\r\n};\r\nexport default GameControls;\r\n","import React from \"react\";\r\nimport \"./GameWraper.scss\";\r\nimport Board from \"./Board/Board.jsx\";\r\nimport GameControls from \"./GameControls/GameControls.jsx\";\r\n\r\nconst GameWraper = (props) => {\r\n  const numpads = [1, 2, 3, 4, 5, 6, 7, 8, 9].map((number) => {\r\n    return (\r\n      <div\r\n        className={\"numpad\" + number}\r\n        key={\"numpad\" + number}\r\n        onClick={props.setValue}\r\n        value={number}\r\n        id={\"numpad\" + number}\r\n      >\r\n        {number}\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"game-wraper\">\r\n      <Board\r\n        board={props.board}\r\n        start={props.start}\r\n        startTimer={props.startTimer}\r\n        focus={props.focus}\r\n        showHint={props.showHint}\r\n        mistakes={props.mistakes}\r\n        generateNewPuzzle={props.generateNewPuzzle}\r\n        blankCells={props.blankCells}\r\n        time={props.time}\r\n        generating={props.generating}\r\n        difficulty={props.difficulty}\r\n      />\r\n      <GameControls\r\n        generateNewPuzzle={props.generateNewPuzzle}\r\n        setValue={props.setValue}\r\n        showTooltip={props.showTooltip}\r\n        tooltip={props.tooltip}\r\n        removeValue={props.removeValue}\r\n        showHint={props.showHint}\r\n        visualize={props.visualize}\r\n        isVisualizing={props.isVisualizing}\r\n      />\r\n      <div className=\"controls-pad-mobile\">\r\n        <div className=\"hint\" onClick={props.showHint}>\r\n          <i className=\"far fa-lightbulb \"></i>\r\n          Hint\r\n        </div>\r\n        <div className=\"visualize\" onClick={props.visualize}>\r\n          <i className=\"fas fa-chess-board\"></i>\r\n          Visualize\r\n        </div>\r\n        <div className=\"erase\" onClick={props.removeValue}>\r\n          <i className=\"fas fa-eraser \"></i>\r\n          Erase\r\n        </div>\r\n      </div>\r\n      <div className=\"number-pad-mobile\">{numpads}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameWraper;\r\n","const clone = (board) => {\r\n  const cloneBoard = board.reduce((accumulator, row) => {\r\n    const cloneRow = row.map((attr) => Object.assign({}, attr));\r\n    accumulator.push([...cloneRow]);\r\n    return accumulator;\r\n  }, []);\r\n  return cloneBoard;\r\n};\r\nexport default clone;\r\n","import React from \"react\";\r\nimport \"./SudokuWraper.scss\";\r\nimport GameInfo from \"./GameInfo/GameInfo.jsx\";\r\nimport GameWraper from \"./GameWraper/GameWraper.jsx\";\r\nimport clone from \"../../CloneBoard/clone.js\";\r\n\r\nconst blankCells = { Easy: 41, Medium: 48, Hard: 50 };\r\n\r\nclass SudokuWraper extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      difficulty: \"Easy\",\r\n      mistakes: 0,\r\n      time: 0,\r\n      start: false,\r\n      board: [],\r\n      tooltip: false,\r\n      target: null,\r\n      showSelector: false,\r\n      blankCells: null,\r\n      isVisualizing: false,\r\n      genrating: false,\r\n    };\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.setDifficulty = this.setDifficulty.bind(this);\r\n    this.chooseDifficulty = this.chooseDifficulty.bind(this);\r\n    this.generateNewPuzzle = this.generateNewPuzzle.bind(this);\r\n    this.focus = this.focus.bind(this);\r\n    this.setValue = this.setValue.bind(this);\r\n    this.showTooltip = this.showTooltip.bind(this);\r\n    this.removeValue = this.removeValue.bind(this);\r\n    this.showHint = this.showHint.bind(this);\r\n    this.visualize = this.visualize.bind(this);\r\n    this.sovle = this.sovle.bind(this);\r\n  }\r\n\r\n  showHint() {\r\n    if (this.state.start && !this.state.isVisualizing) {\r\n      this.setState((prevState) => {\r\n        if (!prevState.target) return {};\r\n        const [row, col] = prevState.target;\r\n        const cell = prevState.board[row][col];\r\n        const correctValue = this.solution[row][col];\r\n\r\n        if (cell.value === 0) {\r\n          cell.value = correctValue;\r\n          cell.hint = true;\r\n          if (prevState.blankCells - 1 === 0) this.startTimer();\r\n          prevState.blankCells -= 1;\r\n          isFilled(row, col, prevState.board, prevState.blankCells);\r\n        }\r\n\r\n        return { board: prevState.board, blankCells: prevState.blankCells };\r\n      });\r\n    }\r\n  }\r\n\r\n  visualize() {\r\n    if (!this.state.start || this.state.generating) return;\r\n    if (!this.state.isVisualizing) {\r\n      this.setState(\r\n        {\r\n          isVisualizing: true,\r\n        },\r\n        () => {\r\n          this.sovle(0);\r\n        }\r\n      );\r\n    } else this.setState({ isVisualizing: false });\r\n  }\r\n\r\n  async sovle(index) {\r\n    if (index === this.blankCellsPostions.length || !this.state.isVisualizing) {\r\n      if (this.state.isVisualizing) this.setState({ isVisualizing: false });\r\n      return Promise.resolve(\"solved\");\r\n    }\r\n    const row = this.blankCellsPostions[index][0];\r\n    const col = this.blankCellsPostions[index][1];\r\n    this.setState((prevState) => {\r\n      prevState.board[row][col].focus = \"target\";\r\n      return {\r\n        board: prevState.board,\r\n      };\r\n    });\r\n    for (let num = 1; num <= 9; num++) {\r\n      let board = this.state.board;\r\n      this.setState((prevState) => {\r\n        prevState.board[row][col].value = num;\r\n        prevState.board[row][col].wrong = true;\r\n        prevState.board[row][col].hint = true;\r\n        return { board: prevState.board };\r\n      });\r\n      if (!this.state.isVisualizing) return Promise.resolve(\"solved\");\r\n      await new Promise((resolve, reject) => {\r\n        setTimeout(() => resolve(\"continue\"), 90);\r\n      });\r\n      if (\r\n        checkRow(row, col, board, num) &&\r\n        checkCol(row, col, board, num) &&\r\n        checkBox(row, col, board, num)\r\n      ) {\r\n        this.setState((prevState) => {\r\n          prevState.board[row][col].wrong = false;\r\n          prevState.board[row][col].hint = false;\r\n          return { board: prevState.board };\r\n        });\r\n        let isSolved = await this.sovle(index + 1);\r\n        if (isSolved === \"solved\") {\r\n          return Promise.resolve(\"solved\");\r\n        }\r\n      }\r\n    }\r\n    this.setState((prevState) => {\r\n      prevState.board[row][col].value = 0;\r\n      prevState.board[row][col].focus = \"\";\r\n      return { board: prevState.board };\r\n    });\r\n    return Promise.resolve(\"false\");\r\n  }\r\n\r\n  removeValue() {\r\n    if (this.state.start && !this.state.isVisualizing) {\r\n      this.setState((prevState) => {\r\n        if (!prevState.target) return {};\r\n        const [row, col] = prevState.target;\r\n        const cell = prevState.board[row][col];\r\n        if ((!cell.hint || cell.wrong) && cell.value !== 0) {\r\n          if (!cell.hint) prevState.blankCells += 1;\r\n          cell.value = 0;\r\n          cell.wrong = false;\r\n          cell.hint = true;\r\n          cell.complete = false;\r\n          return { board: prevState.board, blankCells: prevState.blankCells };\r\n        }\r\n        return {};\r\n      });\r\n    }\r\n  }\r\n\r\n  showTooltip() {\r\n    this.setState((prevState) => ({\r\n      tooltip: !prevState.tooltip,\r\n    }));\r\n  }\r\n\r\n  getCellBoxPosition(event) {\r\n    if (!event.currentTarget) {\r\n      if (this.state.target !== null) {\r\n        const prevRow = this.state.target[0];\r\n        const prevCol = this.state.target[1];\r\n        const newRow = prevRow + event[0];\r\n        const newCol = prevCol + event[1];\r\n        const isValidRow = newRow < 9 && newRow >= 0;\r\n        const isValidCol = newCol < 9 && newCol >= 0;\r\n        if (isValidCol && isValidRow)\r\n          return [newRow, newCol, this.state.board[newRow][newCol].value];\r\n        return [prevRow, prevCol, this.state.board[prevRow][prevCol].value];\r\n      }\r\n      return [0, 0, this.state.board[0][0].value];\r\n    }\r\n    const cell = event.currentTarget;\r\n    const col = parseInt(cell.getAttribute(\"col\"));\r\n    const row = parseInt(cell.parentNode.getAttribute(\"row\"));\r\n    return [row, col, cell.getAttribute(\"value\")];\r\n  }\r\n\r\n  highlight(prevState, [row, col, cellVal]) {\r\n    const boxRow = Math.floor(row / 3) * 3;\r\n    const boxCol = Math.floor(col / 3) * 3;\r\n    prevState.board.forEach((boardRow, rowIndex) => {\r\n      boardRow.forEach((cell, colIndex) => {\r\n        const isInBox =\r\n          rowIndex >= boxRow &&\r\n          rowIndex < boxRow + 3 &&\r\n          colIndex >= boxCol &&\r\n          colIndex < boxCol + 3;\r\n        if (rowIndex === row || colIndex === col || isInBox)\r\n          cell.focus = \"inDomain\";\r\n        else cell.focus = false;\r\n        if (parseInt(cellVal) === cell.value && !cell.wrong && cell.value !== 0)\r\n          cell.sameValue = true;\r\n        else cell.sameValue = false;\r\n      });\r\n    });\r\n    prevState.board[row][col].focus = \"target\";\r\n  }\r\n\r\n  focus(event) {\r\n    if (this.state.start && !this.state.generating) {\r\n      const [row, col, cellVal] = this.getCellBoxPosition(event);\r\n      this.setState((prevState) => {\r\n        this.highlight(prevState, [row, col, cellVal]);\r\n        return { board: prevState.board, target: [row, col, cellVal] };\r\n      });\r\n    }\r\n  }\r\n\r\n  chooseDifficulty() {\r\n    this.setState((prevState) => ({\r\n      showSelector: !prevState.showSelector,\r\n    }));\r\n  }\r\n\r\n  generateNewPuzzle(choosenDifficulty, reset) {\r\n    if (this.state.isVisualizing) return;\r\n    setTimeout(() => {\r\n      if (!reset) {\r\n        fetch(`http://localhost:8080/generate-board/${this.state.difficulty}`)\r\n          .then((res) => res.json())\r\n          .then(([solution, newBoard, blankCellsPostions]) => {\r\n            this.solution = solution;\r\n            this.blankCellsPostions = blankCellsPostions;\r\n            this.setState(\r\n              {\r\n                generating: false,\r\n                board: newBoard,\r\n                blankCells: blankCells[this.state.difficulty],\r\n              },\r\n              () => {\r\n                this.backupBoard = clone(this.state.board);\r\n              }\r\n            );\r\n          });\r\n      } else {\r\n        this.setState(\r\n          {\r\n            generating: false,\r\n            board: this.backupBoard,\r\n            blankCells: blankCells[this.state.difficulty],\r\n          },\r\n          () => {\r\n            this.backupBoard = clone(this.state.board);\r\n          }\r\n        );\r\n      }\r\n      this.startTimer();\r\n    }, 500);\r\n    this.setState((prevState) => ({\r\n      difficulty:\r\n        choosenDifficulty === null ? prevState.difficulty : choosenDifficulty,\r\n      mistakes: 0,\r\n      board: new Array(9).fill([0, 0, 0, 0, 0, 0, 0, 0, 0]),\r\n      time: 0,\r\n      generating: true,\r\n      start: false,\r\n      showSelector: false,\r\n      target: null,\r\n      blankCells: 1,\r\n      tooltip: false,\r\n    }));\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  setDifficulty(event) {\r\n    const choosenDifficulty = event.currentTarget.getAttribute(\"value\");\r\n    if (choosenDifficulty !== this.state.difficulty) {\r\n      this.generateNewPuzzle(choosenDifficulty, false);\r\n    }\r\n  }\r\n\r\n  handleSetValueLogic(prevState, number) {\r\n    if (!prevState.target) return {};\r\n    const [row, col] = prevState.target;\r\n    const cell = prevState.board[row][col];\r\n    const correctValue = this.solution[row][col];\r\n    if (cell.value === 0) {\r\n      if (number !== correctValue) {\r\n        cell.wrong = true;\r\n        if (prevState.mistakes + 1 === 3) this.startTimer();\r\n        prevState.mistakes += 1;\r\n      } else {\r\n        cell.hint = false;\r\n        if (prevState.blankCells - 1 === 0) this.startTimer();\r\n        prevState.blankCells -= 1;\r\n      }\r\n      cell.value = number;\r\n      isFilled(row, col, prevState.board, prevState.blankCells);\r\n      return {\r\n        board: prevState.board,\r\n        mistakes: prevState.mistakes,\r\n        blankCells: prevState.blankCells,\r\n      };\r\n    }\r\n    return {};\r\n  }\r\n\r\n  setValue(event) {\r\n    if (\r\n      this.state.start &&\r\n      this.state.mistakes < 3 &&\r\n      !this.state.isVisualizing\r\n    ) {\r\n      let number = event;\r\n      if (event.currentTarget !== undefined)\r\n        number = parseInt(event.currentTarget.getAttribute(\"value\"));\r\n      this.setState((prevState) => {\r\n        return this.handleSetValueLogic(prevState, number);\r\n      });\r\n    }\r\n  }\r\n\r\n  startTimer() {\r\n    if (\r\n      this.state.mistakes === 3 ||\r\n      this.state.blankCells === 0 ||\r\n      this.state.isVisualizing\r\n    )\r\n      return;\r\n    if (!this.state.start) {\r\n      this.setState({ start: true });\r\n\r\n      this.intervalID = setInterval(() => {\r\n        this.setState((prevState) => ({\r\n          time: prevState.time + 1,\r\n        }));\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(this.intervalID);\r\n      this.setState({\r\n        start: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const keyMove = {\r\n      ArrowUp: [-1, 0],\r\n      ArrowDown: [1, 0],\r\n      ArrowLeft: [0, -1],\r\n      ArrowRight: [0, 1],\r\n    };\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (/[1-9]/.test(event.key)) this.setValue(parseInt(event.key));\r\n      else if (event.key === \"Delete\") this.removeValue();\r\n      else if (keyMove[event.key]) this.focus(keyMove[event.key]);\r\n    });\r\n    // this.startTimer();\r\n    this.generateNewPuzzle(\"Easy\", this.state.board.length);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sudoku-wraper\">\r\n        <GameInfo\r\n          difficulty={this.state.difficulty}\r\n          mistakes={this.state.mistakes}\r\n          time={this.state.time}\r\n          startTimer={this.startTimer}\r\n          start={this.state.start}\r\n          setDifficulty={this.setDifficulty}\r\n          showSelector={this.state.showSelector}\r\n          chooseDifficulty={this.chooseDifficulty}\r\n          generating={this.state.generating}\r\n        />\r\n        <GameWraper\r\n          board={this.state.board}\r\n          mistakes={this.state.mistakes}\r\n          start={this.state.start}\r\n          startTimer={this.startTimer}\r\n          time={this.state.time}\r\n          difficulty={this.state.difficulty}\r\n          generateNewPuzzle={this.generateNewPuzzle}\r\n          focus={this.focus}\r\n          setValue={this.setValue}\r\n          showTooltip={this.showTooltip}\r\n          tooltip={this.state.tooltip}\r\n          removeValue={this.removeValue}\r\n          showHint={this.showHint}\r\n          blankCells={this.state.blankCells}\r\n          visualize={this.visualize}\r\n          generating={this.state.generating}\r\n          isVisualizing={this.state.isVisualizing}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst animateFilled = ([row, col], delay, name) => {\r\n  const filledRow = document.querySelector(`.row${row}`);\r\n  const filledCol = filledRow.querySelector(`.col${col}`);\r\n  filledCol.style.animation = `animate 0.3s ease-in ${delay}s`;\r\n  filledCol.onanimationend = () => {\r\n    if (name === \"solved\") filledCol.style.color = \"transparent\";\r\n    filledCol.style.animation = \"\";\r\n  };\r\n};\r\n\r\nconst checkRow = (row, col, board, num) => {\r\n  let isFilled = true;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (!num && (!board[row][i].value || board[row][i].wrong)) isFilled = false;\r\n    else if (board[row][i].value === num && i !== col && !board[row][i].wrong) {\r\n      return false;\r\n    }\r\n  }\r\n  if (isFilled && !num) {\r\n    for (let i = 0; i < 9; i++) {\r\n      animateFilled([row, i], 0.05 * i);\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst checkCol = (row, col, board, num) => {\r\n  let isFilled = true;\r\n  for (let i = 0; i < 9; i++) {\r\n    if (!num && (!board[i][col].value || board[i][col].wrong)) isFilled = false;\r\n    else if (board[i][col].value === num && i !== row && !board[i][col].wrong) {\r\n      return false;\r\n    }\r\n  }\r\n  if (isFilled && !num) {\r\n    for (let i = 0; i < 9; i++) {\r\n      animateFilled([i, col], 0.05 * i);\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst checkBox = (row, col, board, num) => {\r\n  const boxRow = Math.floor(row / 3) * 3;\r\n  const boxCol = Math.floor(col / 3) * 3;\r\n  let isFilled = true;\r\n  for (let i = boxRow; i < boxRow + 3; i++)\r\n    for (let j = boxCol; j < boxCol + 3; j++)\r\n      if (!num && (!board[i][j].value || board[i][j].wrong)) isFilled = false;\r\n      else if (\r\n        board[i][j].value === num &&\r\n        i !== row &&\r\n        j !== col &&\r\n        !board[i][j].wrong\r\n      ) {\r\n        return false;\r\n      }\r\n  if (isFilled && !num) {\r\n    let delay = 0;\r\n    for (let i = boxRow; i < boxRow + 3; i++)\r\n      for (let j = boxCol; j < boxCol + 3; j++) {\r\n        delay = delay + 0.05 * (j % 3);\r\n        animateFilled([i, j], delay);\r\n      }\r\n  }\r\n  return true;\r\n};\r\n\r\nconst animateBoard = () => {\r\n  for (let i = 0; i < 9; i++)\r\n    for (let j = 0; j < 9; j++) {\r\n      let delay = 0.05 * j;\r\n      animateFilled([i, j], delay, \"solved\");\r\n    }\r\n};\r\n\r\nconst isFilled = (row, col, board, blankCells) => {\r\n  if (!blankCells) animateBoard();\r\n  else {\r\n    checkRow(row, col, board);\r\n    checkCol(row, col, board);\r\n    checkBox(row, col, board);\r\n  }\r\n};\r\n\r\nexport default SudokuWraper;\r\n","import React from \"react\";\r\nimport Header from \"./Header/Header.jsx\";\r\nimport SudokuWraper from \"./SudokuWraper/SudokuWraper.jsx\";\r\n\r\nclass Sudoku extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <SudokuWraper />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Sudoku;\r\n","import React from \"react\";\r\nimport \"./About.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <div id=\"about\">\r\n      <header id=\"about-header\">\r\n        <div id=\"about-wraper\">\r\n          <h1>Sudoku</h1>\r\n          <nav className=\"play-sudoku\">\r\n            <ul>\r\n              <Link to=\"/\">\r\n                <li>\r\n                  Play Sudoku<div id=\"underline\"></div>\r\n                </li>\r\n              </Link>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n      <div className=\"body\">\r\n        <h2 style={{ color: \"#344861\" }}>About Sudoku</h2>\r\n        <img\r\n          src=\"https://previews.123rf.com/images/juliasudnitskaya/juliasudnitskaya1502/juliasudnitskaya150200067/36775373-crossword-sudoku-and-pencil-popular-puzzle-game-with-numbers.jpg\"\r\n          alt=\"img\"\r\n          id=\"img\"\r\n        />\r\n        <div class=\"content\">\r\n          <h3>About</h3>\r\n          <p>\r\n            Sudoku (originally called Number Place) is a logic-based,\r\n            combinatorial number-placement puzzle. In classic sudoku, the\r\n            objective is to fill a 9×9 grid with digits so that each column,\r\n            each row, and each of the nine 3×3 subgrids that compose the grid\r\n            (also called \"boxes\", \"blocks\", or \"regions\") contain all of the\r\n            digits from 1 to 9. The puzzle setter provides a partially completed\r\n            grid, which for a well-posed puzzle has a single solution. Completed\r\n            games are always an example of a Latin square, including an\r\n            additional constraint on the contents of individual regions. For\r\n            example, the same single integer may not appear twice in the same\r\n            row, column, or any of the nine 3×3 subregions of the 9×9 playing\r\n            board.\r\n          </p>\r\n\r\n          <div id=\"example-image\">\r\n            <div>\r\n              <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e0/Sudoku_Puzzle_by_L2G-20050714_standardized_layout.svg/250px-Sudoku_Puzzle_by_L2G-20050714_standardized_layout.svg.png\"\r\n                alt=\"typical-sudoku-board\"\r\n                id=\"sudoku-board\"\r\n              />\r\n              <p\r\n                style={{\r\n                  marginTop: \"-8px\",\r\n                  color: \"#344861\",\r\n                }}\r\n              >\r\n                A typical sudoku board ...\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <img\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/12/Sudoku_Puzzle_by_L2G-20050714_solution_standardized_layout.svg/250px-Sudoku_Puzzle_by_L2G-20050714_solution_standardized_layout.svg.png\"\r\n                alt=\"typical-sudoku-solution\"\r\n                id=\"sudoku-board\"\r\n              />\r\n              <p\r\n                style={{\r\n                  marginTop: \"-8px\",\r\n                  color: \"#344861\",\r\n                }}\r\n              >\r\n                ... and its solution\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <h3>History</h3>\r\n          <p>\r\n            The history of Sudoku dates back to an 18th Century Swiss\r\n            mathematician’s game called “Latin Squares” (according to this\r\n            article from the Economist) and some of the first number puzzles to\r\n            appear in newspapers were published in France in 1895. But the\r\n            modern game of Sudoku as we recognize it today was invented by\r\n            Howard Garns, a freelance puzzle inventor from Connersville,\r\n            Indiana, USA in 1979 when it was published in Dell Pencil Puzzles\r\n            and Word Games magazine. The puzzle was known as “Number Place,”\r\n            since it involved placing individual numbers into empty spots on a 9\r\n            x 9 grid.\r\n          </p>\r\n          <p>\r\n            The game first appeared in Japan in 1984 where it was given the name\r\n            “Sudoku,” which is short for a longer expression in Japanese – “Sūji\r\n            wa dokushin ni kagiru” – which means, “the digits are limited to one\r\n            occurrence.” Sudoku continues to be highly popular in Japan, where\r\n            people buy over 600,000 Sudoku magazines per month.\r\n          </p>\r\n          <p>\r\n            One reason that Sudoku puzzles are so beloved in Japan is because\r\n            the Japanese language doesn’t work very well for crossword puzzles –\r\n            so a number puzzle was much more successful in Japanese culture.\r\n            Also, Japan tends to love puzzles, since it is a country where\r\n            millions of people make lengthy commutes by train or bus, and they\r\n            need to kill time while waiting for the next stop.\r\n          </p>\r\n          <p>\r\n            The man who reintroduced Sudoku “back” to the Western world was a\r\n            New Zealand judge named Wayne Gould, who was on vacation in Tokyo in\r\n            March 1997 when he discovered Sudoku in a bookstore. He quickly\r\n            became a devoted enthusiast of Sudoku and spent the next six years\r\n            developing a computer program that could generate Sudoku puzzles.\r\n          </p>\r\n          <p>\r\n            The Times of London began publishing Sudoku puzzles in 2004, and the\r\n            first U.S. newspaper to feature Sudoku was The Conway (New\r\n            Hampshire) Daily Sun in 2004. Within the past 10 years, Sudoku has\r\n            become a global phenomenon. The first World Sudoku Championship was\r\n            hosted in Italy in 2006 and the 2013 World Sudoku Championship will\r\n            be held in Beijing.\r\n          </p>\r\n          <h3>Competitions</h3>\r\n          <ul>\r\n            <li>\r\n              The first World Sudoku Championship was held in Lucca, Italy, from\r\n              March 10 to 12, 2006. The winner was Jana Tylová of the Czech\r\n              Republic.[40] The competition included numerous variants.\r\n            </li>\r\n            <li>\r\n              The second World Sudoku Championship was held in Prague, Czech\r\n              Republic, from March 28 to April 1, 2007.[42] The individual\r\n              champion was Thomas Snyder of the USA. The team champion was\r\n              Japan.\r\n            </li>\r\n            <li>\r\n              The third World Sudoku Championship was held in Goa, India, from\r\n              April 14 to 16, 2008. Thomas Snyder repeated as the individual\r\n              overall champion, and also won the first ever Classic Trophy (a\r\n              subset of the competition counting only classic Sudoku). The Czech\r\n              Republic won the team competition\r\n            </li>\r\n            <li>\r\n              The fourth World Sudoku Championship was held in Žilina, Slovakia,\r\n              from April 24 to 27, 2009. After past champion Thomas Snyder of\r\n              the USA won the general qualification, Jan Mrozowski of Poland\r\n              emerged from a 36-competitor playoff to become the new World\r\n              Sudoku Champion. Host nation Slovakia emerged as the top team in a\r\n              separate competition of three-membered squads.\r\n            </li>\r\n            <li>\r\n              The fifth World Sudoku Championship was held in Philadelphia,\r\n              Pennsylvania, from April 29 to May 2, 2010. Jan Mrozowski of\r\n              Poland successfully defended his world title in the individual\r\n              competition, while Germany won a separate team event. The puzzles\r\n              were written by Thomas Snyder and Wei-Hwa Huang, both past U.S.\r\n              Sudoku champions.\r\n            </li>\r\n            <li>\r\n              The 12th World Sudoku Championship (WSC) was held in Bangalore,\r\n              India, from October 15 to 22, 2017. Kota Morinishi of Japan won\r\n              the Individual WSC and China won the team event.\r\n            </li>\r\n            <li>\r\n              The 13th World Sudoku Championship took place in the Czech\r\n              Republic.\r\n            </li>\r\n            <li>\r\n              In the United States, The Philadelphia Inquirer Sudoku National\r\n              Championship has been held three times, each time offering a\r\n              $10,000 prize to the advanced division winner and a spot on the\r\n              U.S. National Sudoku Team traveling to the world championships.\r\n              The winners of the event were Thomas Snyder (2007), Wei-Hwa Huang\r\n              (2008), and Tammy McLeod (2009). In the 2009 event, the\r\n              third-place finalist in the advanced division, Eugene Varshavsky,\r\n              performed quite poorly onstage after setting a very fast\r\n              qualifying time on paper, which caught the attention of organizers\r\n              and competitors including past champion Thomas Snyder, who\r\n              requested organizers reconsider his results due to a suspicion of\r\n              cheating. Following an investigation and a retest of Varshavsky,\r\n              the organizers disqualified him and awarded Chris Narrikkattu\r\n              third place.\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default About;\r\n","import \"./HowToPlay.scss\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst HowToPlay = () => {\r\n  return (\r\n    <div id=\"how-to-play\">\r\n      <header id=\"how-to-play-header\">\r\n        <div id=\"how-to-play-wraper\">\r\n          <h1>Sudoku</h1>\r\n          <nav className=\"play-sudoku\">\r\n            <ul>\r\n              <Link to=\"/\">\r\n                <li>\r\n                  Play Sudoku<div id=\"underline\"></div>\r\n                </li>\r\n              </Link>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n      <div className=\"how-to-play-body\">\r\n        <h2 style={{ color: \"#344861\" }}> How To Play Sudoku ? </h2>\r\n        <img\r\n          src=\"https://sudoku.com/img/post-images/155230898.jpg\"\r\n          alt=\"sudoku-board-and-a-pen\"\r\n          id=\"img\"\r\n        />\r\n        <div className=\"how-to-play-content\">\r\n          <div className=\"rule\">\r\n            <ul>\r\n              <li>Sudoku Rule No.1: Use Numbers 1-9</li>\r\n            </ul>\r\n            <p>\r\n              Sudoku is played on a grid of 9 x 9 spaces. Within the rows and\r\n              columns are 9 “squares” (made up of 3 x 3 spaces). Each row,\r\n              column and square (9 spaces each) needs to be filled out with the\r\n              numbers 1-9, without repeating any numbers within the row, column\r\n              or square. Does it sound complicated? As you can see from the\r\n              image below of an actual Sudoku grid, each Sudoku grid comes with\r\n              a few spaces already filled in; the more spaces filled in, the\r\n              easier the game – the more difficult Sudoku puzzles have very few\r\n              spaces that are already filled in.\r\n            </p>\r\n            <ul>\r\n              <li>Sudoku Rule No.2: Don’t Repeat Any Numbers</li>\r\n            </ul>\r\n            <img\r\n              src=\"https://sudoku.com/img/post-images/Sudoku-Rules-for-Complete-Beginners-1.jpg\"\r\n              alt=\"example-sudoku-rule\"\r\n              id=\"example-image-rule\"\r\n            />\r\n            <p>\r\n              As you can see, in the upper left square (circled in blue), this\r\n              square already has 7 out of the 9 spaces filled in. The only\r\n              numbers missing from the square are 5 and 6. By seeing which\r\n              numbers are missing from each square, row, or column, we can use\r\n              process of elimination and deductive reasoning to decide which\r\n              numbers need to go in each blank space. For example, in the upper\r\n              left square, we know we need to add a 5 and a 6 to be able to\r\n              complete the square, but based on the neighboring rows and squares\r\n              we cannot clearly deduce which number to add in which space. This\r\n              means that we should ignore the upper left square for now, and try\r\n              to fill in spaces in some other areas of the grid instead.\r\n            </p>\r\n            <ul>\r\n              <li>Sudoku Rule No.3: Don’t Guess</li>\r\n            </ul>\r\n            <p>\r\n              Sudoku is a game of logic and reasoning, so you shouldn’t have to\r\n              guess. If you don’t know what number to put in a certain space,\r\n              keep scanning the other areas of the grid until you seen an\r\n              opportunity to place a number. But don’t try to “force” anything –\r\n              Sudoku rewards patience, insights, and recognition of patterns,\r\n              not blind luck or guessing.\r\n            </p>\r\n            <ul>\r\n              <li>Sudoku Rule No.4: Use Process of Elimination</li>\r\n            </ul>\r\n            <p>\r\n              What do we mean by using “process of elimination” to play Sudoku?\r\n              Here is an example. In this Sudoku grid (shown below), the far\r\n              left-hand vertical column (circled in Blue) is missing only a few\r\n              numbers: 1, 5 and 6. One way to figure out which numbers can go in\r\n              each space is to use “process of elimination” by checking to see\r\n              which other numbers are already included within each square –\r\n              since there can be no duplication of numbers 1-9 within each\r\n              square (or row or column).\r\n            </p>\r\n            <img\r\n              src=\"https://sudoku.com/img/post-images/Sudoku-Rules-for-Complete-Beginners-2.jpg\"\r\n              alt=\"process-of-limination-example\"\r\n              id=\"example-image-rule\"\r\n            />\r\n            <p>\r\n              In this case, we can quickly notice that there are already number\r\n              1s in the top left and center left squares of the grid (with\r\n              number 1s circled in red). This means that there is only one space\r\n              remaining in the far left column where a 1 could possibly go –\r\n              circled in green. This is how the process of elimination works in\r\n              Sudoku – you find out which spaces are available, which numbers\r\n              are missing – and then deduce, based on the position of those\r\n              numbers within the grid, which numbers fit into each space. Sudoku\r\n              rules are relatively uncomplicated – but the game is infinitely\r\n              varied, with millions of possible number combinations and a wide\r\n              range of levels of difficulty. But it’s all based on the simple\r\n              principles of using numbers 1-9, filling in the blank spaces based\r\n              on deductive reasoning, and never repeating any numbers within\r\n              each square, row or column.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HowToPlay;\r\n","import \"./Tips.scss\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Tips = () => {\r\n  return (\r\n    <div id=\"tips\">\r\n      <header id=\"tips-header\">\r\n        <div id=\"tips-wraper\">\r\n          <h1>Sudoku</h1>\r\n          <nav className=\"play-sudoku\">\r\n            <ul>\r\n              <Link to=\"/\">\r\n                <li>\r\n                  Play Sudoku<div id=\"underline\"></div>\r\n                </li>\r\n              </Link>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n      </header>\r\n      <div className=\"tips-body\">\r\n        <h2 style={{ color: \"#344861\" }}> Sudoku Tips </h2>\r\n        <img\r\n          src=\"https://image.freepik.com/free-photo/pencil-lying-sudoku-grid_126745-1664.jpg\"\r\n          alt=\"sudoku-board-and-pencil\"\r\n          id=\"tips-entry-image\"\r\n        />\r\n        <div className=\"tips-content\">\r\n          <p>\r\n            <strong>Look for the easy play first: </strong>\r\n            When you first start to play a Sudoku puzzle, look for where you\r\n            have the easiest opportunities to add a number. Usually this is\r\n            where there is a crowded square or a row that is almost full of\r\n            numbers. Sometimes, especially on the Easy-rated Sudoku puzzles, you\r\n            can quickly use process of elimination to figure out where to place\r\n            a number. For example, if there is a square that already has numbers\r\n            1-7, you know that you only need to figure out where to put numbers\r\n            8 and 9. Look at the rows that feed into that row or square –\r\n            sometimes you will be able to eliminate one number or the other, and\r\n            can quickly fill in the gaps.\r\n          </p>\r\n          <img\r\n            src=\"https://sudoku.com/img/post-images/Sudoku-Example-1.jpg\"\r\n            alt=\"sudoku-board\"\r\n            id=\"tips-content-image\"\r\n          />\r\n          <p>\r\n            <strong>Look for which numbers are missing: </strong>\r\n            Sudoku is about placing numbers where they don’t already exist –\r\n            it’s a logical process of elimination. If a number already exists in\r\n            a row or square, then that number cannot be placed again. Your\r\n            challenge is to keep thinking and looking and spotting opportunities\r\n            to add numbers where they haven’t already been placed. For example,\r\n            if the top row of a Sudoku puzzle already has the numbers 1, 7, 8,\r\n            5, 9 and 2, this means that the row still needs numbers 3, 4, and 6.\r\n            Look in the nearby rows (within the same squares) to see if you can\r\n            rule out any of those three missing numbers.\r\n          </p>\r\n          <img\r\n            src=\"https://sudoku.com/img/post-images/Sudoku-Example-2.jpg\"\r\n            alt=\"sudoku-board\"\r\n            id=\"tips-content-image\"\r\n          />\r\n          <p>\r\n            <strong>Don't guess: </strong>Sudoku does not require guesswork. If\r\n            you aren’t sure if a number belongs in a certain spot, you’re better\r\n            off not guessing.\r\n          </p>\r\n          <p>\r\n            <strong>Keep Moving: </strong>Sudoku rewards the “roving eye” – if\r\n            you feel stuck, don’t concentrate too hard on one part of the puzzle\r\n            grid. Instead, let your eye and your mind wander to a different\r\n            place on the grid where you haven’t placed any numbers yet, and see\r\n            which new possibilities become apparent to you.\r\n          </p>\r\n          <p>\r\n            <strong>Constantly re-evaluate: </strong>Every time you place a new\r\n            number on the Sudoku grid, you should ask yourself, “What changed?\r\n            What do I know now, as a result of having placed that number? For\r\n            example, if you successfully place a number 5 in a horizontal row,\r\n            how does that 5 affect what’s going on in the neighboring squares?\r\n            Every single time you place a number, it gives you an opportunity to\r\n            potentially place more numbers in nearby rows and squares (depending\r\n            on which other numbers in those places are already known). This is\r\n            one of the most satisfying aspects of playing Sudoku – every step in\r\n            solving the puzzle leads you closer to the conclusion.\r\n          </p>\r\n          <p>\r\n            Sudoku is a fun and intellectually stimulating game because it\r\n            exercises the part of the brain that craves logic, order and a\r\n            natural progression toward a satisfying conclusion. Even if you’re a\r\n            Sudoku beginner, we’re sure that you’ll find a lot to love about\r\n            this game. Happy number hunting!\r\n          </p>\r\n          <p>\r\n            <strong>\r\n              Above is just some basic tips on solving sudoku. Please see{\" \"}\r\n              <a\r\n                href=\"https://sudoku.com/how-to-play/how-to-solve-sudoku-puzzles-real-tips-and-advice-part-1/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                here\r\n              </a>{\" \"}\r\n              for more advanced tips and advice.\r\n            </strong>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tips;\r\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Sudoku from \"./Components/Sudoku.jsx\";\r\nimport About from \"./Components/About.jsx\";\r\nimport HowToPlay from \"./Components/HowToPlay.jsx\";\r\nimport Tips from \"./Components/Tips.jsx\";\r\nimport React from \"react\";\r\nconst SudokuApp = () => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/about\" component={About} />\r\n        <Route path=\"/how-to-play\" component={HowToPlay} />\r\n        <Route path=\"/tips\" component={Tips} />\r\n        <Route path=\"/\" component={Sudoku} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default SudokuApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport SudokuApp from \"./SudokuApp.jsx\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <SudokuApp />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}